/*
 * THIS FILE IS GENERATED BY src/build.php
 * ALTERATIONS IN THIS FILE WILL BE OVERWRITTEN.
 *
 * Built on 2010-11-20 15:47:51.
 */

/**
 * NextShout namespace.
 */
var NextShout = {};
NextShout.options = {};

/** @param {jQuery} $ jQuery Object */
!function ($, window, document, _undefined)
{
// ===== base.js =====
/**
 * Data that should be shared between any shoutboxes on the page.
 */
$.extend(NextShout,
{
	timestamps      : [],
	debug           : false,
	isWindowFocused : true,
	baseWindowTitle : '',
	totalNewShouts  : 0,
	jsCommands      : {},

	updateDocTitle: function()
	{
		if ( !NextShout.options.notifyNewShouts ) {
			return;
		}

		var n = NextShout.totalNewShouts;
		if ( n > 0 && !NextShout.isWindowFocused ) {
			document.title = '(' + n + ') ' + NextShout.baseWindowTitle;
		} else {
			document.title = NextShout.baseWindowTitle;
		}
	},

	/**
	 * Register a command to be handled by JS. The callback receives
	 * a NextShout.ShoutBox instance and the shout text.
	 */
	registerCommand: function(cmd, callback)
	{
		NextShout.jsCommands[cmd] = callback;
	},

	registerCommands: function(commands)
	{
		$.each(commands, function(cmd, callback) {
			NextShout.registerCommand(cmd, callback);
		});
	},
	
	/**
	 * Replaces %param% in text with values of the passed object.
	 * Also handles simple true/false conditions with {if:param}blah{else}foo{endif}.
	 */
	template: function(text, obj)
	{
		obj = obj || {};

		// the price we pay to make templates look a bit nicer.
		text = text.replace(/\{if:([A-Za-z0-9_]+)\}(.*)\{else\}(.*)\{endif\}/g, function(str, cond, ifTrue, ifFalse) {
			return obj[cond] ? ifTrue : ifFalse;
		});

		return text.replace(/%([A-Za-z0-9_]+)%/g, function(str, param1) {
			if ( typeof obj[param1] != 'undefined' ) {
				return obj[param1];
			} else {
				return str;
			}
		});
	}

});

NextShout.registerCommands({
	color: function(box, arg) { box.setColor(arg); },
	style: function(box, arg) { box.setStyle(arg); },
	font : function(box, arg) { box.setFont(arg); }
});

/**
 * Handles storing multiple values in a single cookie.
 */
NextShout.Cookie = function(prefix) { this.__construct(prefix); };
NextShout.Cookie.prototype =
{
	__construct: function(prefix)
	{
		this.name   = 'nextshout';
		this.prefix = prefix || '';
		this.str    = $.getCookie(this.name) || '';
		this.data   = {};

		var p, d = this.str.split('&');
		for ( var i = 0; i < d.length; i++ ) {
			p = d[i].split('=');
			this.data[decodeURIComponent(p[0])] = decodeURIComponent(p[1]);
		}
	},

	save: function()
	{
		var value = $.param(this.data, true);
		var expiry = new Date();
		expiry.setFullYear(expiry.getFullYear() + 1);
		$.setCookie(this.name, value, expiry);
	},

	set: function(key, value)
	{
		key = this.prefix + key;
		this.data[key] = value;
		this.save();
		return this;
	},

	get: function(key)
	{
		key = this.prefix + key;
		return this.data[key] || null;
	},

	remove: function(key)
	{
		key = this.prefix + key;
		if ( this.data[key] ) {
			delete this.data[key];
			this.save();
		}
		return this;
	}
};
// ===== / base.js =====

// ===== shout.js =====
/**
 * Model to represent a single shout.
 */
NextShout.Shout = function(list, shout) { this.__construct(list, shout); };

// constants
$.extend(NextShout.Shout, {
	FLAG_ME    : 1,
	FLAG_EDIT  : 2,
	FLAG_DELETE: 4
});

NextShout.Shout.TEMPLATE_SIMPLE =
  '<li class="nextshout_shoutSimple">\n'
+ '  %shout%\n'
+ '</li>\n';

NextShout.Shout.TEMPLATE_FULL = 
  '<li class="nextshout_shoutFull">\n'
+ '  %deleteIcon%\n'
+ '  %editIcon%\n'
+ '  %channelData%\n'
+ '  <span class="nextshout_date">[%dateText%]</span>\n'
+ '  {if:meShout}{else}<span class="nextshout_user">%userLink%:</span>{endif}\n'
+ '  {if:meShout}<span class="nextshout_me">*%userLink% %shout%*</span>{else}<span class="nextshout_shout">%shout%</span>{endif}\n'
+ '</li>\n';

NextShout.Shout.prototype =
{
	__construct: function(list, shout)
	{
		this.list = list;
		this.box  = this.list.box;
		
		// load/normalize shout data
		this.id           = shout.ID || 0;
		this.channelName  = shout.CN || '';
		this.channelColor = shout.CC ? 'color:' + shout.CC : '';
		this.dateText     = shout.DT || '';
		this.userId       = shout.UI || 0;
		this.userName     = shout.UN || '';
		this.shout        = shout.ST || '';

		this.meShout      = (shout.OP & NextShout.Shout.FLAG_ME)     ? true : false;
		this.showEditIcon = (shout.OP & NextShout.Shout.FLAG_EDIT)   ? true : false;
		this.showDelIcon  = (shout.OP & NextShout.Shout.FLAG_DELETE) ? true : false;

		this.cachedHtml = '';
	},

	render: function()
	{
		return this.id ? this.renderFull() : this.renderSimple();
	},

	renderFull: function()
	{
		if ( this.cachedHtml.length ) {
			return this.cachedHtml;
		}

		this.cachedHtml = NextShout.template(NextShout.Shout.TEMPLATE_FULL, {
			id          : this.id,
			channelData : channelData,
			dateText    : this.dateText,
			userLink    : 'members/' + this.userId + '/', // fix me?
			userName    : this.userName,
			shout       : shout,
			deleteIcon  : deleteIcon,
			editIcon    : editIcon
		});
		return this.cachedHtml;
	},

	renderSimple: function()
	{
		return NextShout.template(NextShout.Shout.TEMPLATE_SIMPLE, {
			shout: this.shout
		});
	}
};
// ===== / shout.js =====

// ===== list.js =====
/**
 * Model to represent a list of shouts.
 */
NextShout.ShoutList = function(shoutbox) { this.__construct(shoutbox); };
NextShout.ShoutList.prototype =
{
	/**
	 * Constructor.
	 * @param {NextShout.ShoutBox} Related shoutbox instance.
	 */
	__construct: function(box)
	{
		this.box = box;
	}
};
// ===== / list.js =====

// ===== box.js =====
/**
 * Represents a single shoutbox on the page. Should take markup enclosed in a 
 * .NextShoutBox element and make it actually do something worthwhile.
 */
NextShout.ShoutBox = function($element) { this.__construct($element); };
NextShout.ShoutBox.prototype = 
{
	__construct: function($element)
	{
		this.$element = $element;
		this.identifier = $element.data('identifier') || 'main';
		this.defaultChannel = $element.data('defaultChannel') || 'main'; // fixme, use channel 1 from data

		this.$title = $element.find('h3.subHeading');
		this.baseTitle = this.$title.html();

		this.$input  = $element.find('.nextshout_inputRow > input.textCtrl');
		this.$button = $element.find('.nextshout_inputRow > input.button');
		this.$channelIndicator = $element.find('.nextshout_inputRow > span');
		this.canShout = (this.$input.length > 0);

		this.$shoutList = $element.find('div.nextshout_shoutList');
		this.shoutList  = new NextShout.ShoutList(this);

		this.$loadAnim = $element.find('div.nextshout_loadAnim');
		
		this.loadCookie();
		this.setupDragger();
		this.requestData();
//		setInterval($.context(this.runResizeQueue, this), 100);
	},
	// note, when doing ajax, set global: false for options to hide throbber.

	/**
	 * Loads settings stored in a cookie prefixed with this box's identifier.
	 */
	loadCookie: function()
	{
		this.cookie = new NextShout.Cookie(this.identifier + '_');
		
		// channel setup
		var channel = this.cookie.get('channel');
		if ( !channel || !this.isValidChannel(channel) ) {
			channel = this.defaultChannel;
		}
		this.changeChannel(channel, true);
		
		// last channel used (aggregate)
		this.lastChannelUsed = this.cookie.get('lastChannel');
		if ( !this.lastChannelUsed || !this.isValidChannel(this.lastChannelUsed) ) {
			this.lastChannelUsed = this.defaultChannel;
		}
		
		// height
		var height = this.cookie.get('height');
		if ( height ) {
			this.$shoutList.height(height);
		}

		// custom styles
		this.setColor(this.cookie.get('color'));
		this.setStyle(this.cookie.get('style'));
		this.setFont(this.cookie.get('font'));
	},

	/**
	 * Runs procedures for changing the channel (updating title, reloading)
	 */
	changeChannel: function(channel, skipRequest)
	{
		if ( !this.isValidChannel(channel) ) {
			return;
		}

		this.channel = channel;
		this.$title.html(this.baseTitle + ' - ' + this.channel); // fixme, use channel name not ident

		if ( skipRequest ) {
			return;
		}

		this.cookie.set('channel', this.channel);
		if ( this.canShout ) {
			this.$button.val('Shout'); // fixme, phrase this
			this.$input.focus();
		}

		this.list.clear();
		this.lastDelta = -1;
		this.requestData();
	},

	/**
	 * Sets up the drag-drop resize feature.
	 */
	setupDragger: function()
	{
		this.isDragging = false;

		var _dragStart = function(e)
		{
			this.isDragging = true;
			this.dragStartY = e.pageY;
			this.dragStartH = this.$shoutList.height();
		};

		var _dragMove = function(e)
		{
			if ( this.isDragging ) {
				var newHeight = this.dragStartH + (e.pageY - this.dragStartY);
				this.$shoutList.height(newHeight);
			}
		};

		var _dragStop = function(e)
		{
			if ( this.isDragging ) {
				// set cookie and auto resize images
				this.cookie.set('height', this.$shoutList.height());
				
				this.isDragging = false;
			}
		};


		$footer = this.$element.find('div.sectionFooter');
		$footer.mousedown($.context(_dragStart, this));
		$(document).mousemove($.context(_dragMove, this));
		$(document).mouseup($.context(_dragStop, this));
	},
	
	/**
	 * Attempt to execute a clientside command.
	 */
	executeCommand: function(shout)
	{
		var givenCmd = shout.match(/^\/([A-Za-z0-9]+)/), fn;
		if ( givenCmd && givenCmd[1] && NextShout.jsCommands[givenCmd[1]] ) {
			fn = NextShout.jsCommands[givenCmd[1]];
			fn(this, shout.substr(givenCmd[1].length + 2));
			this.clearInput();
			return true;
		}
		return false;
	},

	/**
	 * Toggles the custom load animation.
	 */
	toggleLoadAnim: function(onOff)
	{
		this.$loadAnim.css('visibility', onOff ? 'visible' : 'hidden');
	}
};
// ===== / box.js =====

// ===== queue.js =====
NextShout.ShoutQueue = function(maxSize) { this.__construct(maxSize); };
NextShout.ShoutQueue.prototype =
{
	__construct: function(maxSize)
	{
		this.maxSize    = maxSize;
		this.queue      = [];
		this.processing = false;
	}
};
// ===== / queue.js =====

// ===== setup.js =====
$(document).bind('XenForoWindowFocus', function() {
	if ( NextShout.isWindowFocused ) {
		return;
	}
	NextShout.isWindowFocused = true;
	NextShout.totalNewShouts  = 0;
	NextShout.updateDocTitle();
});

$(document).bind('XenForoWindowBlur', function() {
	NextShout.isWindowFocused = false;
});

$(document).ready(function() {
	NextShout.baseWindowTitle = document.title;
});

// Initialize the shoutbox for all class="NextShoutBox"
XenForo.register('.NextShoutBox', 'NextShout.ShoutBox');
// ===== / setup.js =====
}
(jQuery, this, document);